{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cjzR7htjCsTBKzwjryNwHD-a9CDeRAx-","timestamp":1717276411747}],"machine_shape":"hm","gpuType":"L4","authorship_tag":"ABX9TyNQ4K0JDGjZS2FVrg7YnYwK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install torch torchvision torchaudio\n","!pip install transformers[torch]\n","!pip install transformers\n","!pip install accelerate -U\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9JucZ9RnR5rY","executionInfo":{"status":"ok","timestamp":1717275165138,"user_tz":-180,"elapsed":77946,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"17a29541-0ded-4f48-df88-61f3581da41e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.18.0+cu121)\n","Requirement already satisfied: torchaudio in /usr/local/lib/python3.10/dist-packages (2.3.0+cu121)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2023.6.0)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.3.0)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch)\n","  Downloading nvidia_nvjitlink_cu12-12.5.40-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m54.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.25.2)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.40 nvidia-nvtx-cu12-12.1.105\n","Requirement already satisfied: transformers[torch] in /usr/local/lib/python3.10/dist-packages (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (3.14.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.23.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (24.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2024.5.15)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.31.0)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.19.1)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.4.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (4.66.4)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.3.0+cu121)\n","Collecting accelerate>=0.21.0 (from transformers[torch])\n","  Downloading accelerate-0.30.1-py3-none-any.whl (302 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.6/302.6 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate>=0.21.0->transformers[torch]) (5.9.5)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers[torch]) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers[torch]) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.1.4)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (2.20.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (12.1.105)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (2.3.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch->transformers[torch]) (12.5.40)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->transformers[torch]) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->transformers[torch]) (1.3.0)\n","Installing collected packages: accelerate\n","Successfully installed accelerate-0.30.1\n","Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.14.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.23.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (4.11.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.2.2)\n","Requirement already satisfied: accelerate in /usr/local/lib/python3.10/dist-packages (0.30.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from accelerate) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (24.0)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate) (5.9.5)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from accelerate) (6.0.1)\n","Requirement already satisfied: torch>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (2.3.0+cu121)\n","Requirement already satisfied: huggingface-hub in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.23.1)\n","Requirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.4.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.14.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (4.11.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2023.6.0)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.20.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.3.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.10.0->accelerate) (12.5.40)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (2.31.0)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (4.66.4)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2024.2.2)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.10.0->accelerate) (1.3.0)\n"]}]},{"cell_type":"code","source":["!pip install contractions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s7n4LK2EldZg","executionInfo":{"status":"ok","timestamp":1717275330734,"user_tz":-180,"elapsed":5909,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"01d1a814-ad8a-4ba0-b10e-dba041982ad6"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting contractions\n","  Downloading contractions-0.1.73-py2.py3-none-any.whl (8.7 kB)\n","Collecting textsearch>=0.0.21 (from contractions)\n","  Downloading textsearch-0.0.24-py2.py3-none-any.whl (7.6 kB)\n","Collecting anyascii (from textsearch>=0.0.21->contractions)\n","  Downloading anyascii-0.3.2-py3-none-any.whl (289 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pyahocorasick (from textsearch>=0.0.21->contractions)\n","  Downloading pyahocorasick-2.1.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (110 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.7/110.7 kB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pyahocorasick, anyascii, textsearch, contractions\n","Successfully installed anyascii-0.3.2 contractions-0.1.73 pyahocorasick-2.1.0 textsearch-0.0.24\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import re\n","from sklearn.model_selection import train_test_split\n","import transformers\n","import torch\n","import accelerate\n","from transformers import BertTokenizer, BertForSequenceClassification\n","from sklearn.metrics import classification_report\n","from torch.nn import CrossEntropyLoss\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.utils.class_weight import compute_class_weight\n","from transformers import BertForSequenceClassification, Trainer, TrainingArguments\n","import torch, torch.utils.data\n","from nltk.stem import WordNetLemmatizer\n","import nltk\n","from contractions import fix\n","nltk.download('wordnet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Le1h6mUGD6Ov","executionInfo":{"status":"ok","timestamp":1717275486654,"user_tz":-180,"elapsed":776,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"ca1ae423-8dde-4570-f957-335406bc5246"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iU4B10h9DZPH","executionInfo":{"status":"ok","timestamp":1717275207963,"user_tz":-180,"elapsed":16028,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"20bf5934-6082-4d80-f256-c7190733aad9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Mount Google Drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["%cd drive/MyDrive/Cs412/project_files"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"crjPI1x4D4Ot","executionInfo":{"status":"ok","timestamp":1717275209422,"user_tz":-180,"elapsed":247,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"18773041-b779-4770-831f-f2add9f2724d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Cs412/project_files\n"]}]},{"cell_type":"code","source":["train_df = pd.read_csv('bugs-train.csv')\n","test_df = pd.read_csv('bugs-test.csv')"],"metadata":{"id":"0igXs9IxEHva","executionInfo":{"status":"ok","timestamp":1717275844819,"user_tz":-180,"elapsed":686,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Display the first few rows of the training dataset\n","print(\"First few rows of the training dataset:\")\n","print(train_df.head())\n","\n","# Check for class imbalance in the training set\n","severity_counts = train_df['severity'].value_counts()\n","print(\"\\nDistribution of Bug Severity in Training Set:\")\n","print(severity_counts)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"je5JnYSaERA5","executionInfo":{"status":"ok","timestamp":1717275339538,"user_tz":-180,"elapsed":251,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"ac2afb2a-6b0c-43c0-cd5b-6b38d1fa63a6"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["First few rows of the training dataset:\n","   bug_id                                            summary  severity\n","0  365569                  Remove workaround from bug 297227    normal\n","1  365578    Print Preview crashes on any URL in gtk2 builds  critical\n","2  365582                     Lines are not showing in table     major\n","3  365584  Firefox render ÛÏsimplified ArabicÛ font fa...    normal\n","4  365597             Crash [@ nsINodeInfo::NodeInfoManager]  critical\n","\n","Distribution of Bug Severity in Training Set:\n","severity\n","normal         125854\n","critical        18658\n","major            6053\n","enhancement      4426\n","minor            3102\n","trivial          1204\n","blocker           701\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# Plot the distribution of bug severity in the training set\n","severity_counts.plot(kind='bar')\n","plt.xlabel('Severity')\n","plt.ylabel('Count')\n","plt.title('Distribution of Bug Severity in Training Set')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":553},"id":"cGC1Mlk2ETbX","executionInfo":{"status":"ok","timestamp":1717275341351,"user_tz":-180,"elapsed":329,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"d5d879fb-f228-46e9-b70b-c135deacdb99"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def clean_text(text):\n","  # Expand contractions\n","    text = fix(text)\n","    # Remove non-ASCII characters\n","    text = re.sub(r'[^\\x00-\\x7F]+', ' ', text)\n","    # Convert to lowercase\n","    text = text.lower()\n","    # Remove special characters, numbers, and punctuation\n","    text = re.sub(r'[^a-z\\s]', '', text)\n","     # Lemmatize words\n","    words = text.split()\n","    lemmatizer = WordNetLemmatizer()\n","    words = [lemmatizer.lemmatize(word) for word in words]\n","\n","    return ' '.join(words)"],"metadata":{"id":"3kUPSjF4lWeL","executionInfo":{"status":"ok","timestamp":1717275441219,"user_tz":-180,"elapsed":315,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Function to check if a string contains only English characters\n","def is_english(s):\n","    return bool(re.match(r'^[\\x00-\\x7F]+$', s))\n","\n","# Remove rows with non-English characters in the 'summary' column\n","#train_df['summary'] = train_df[train_df['summary'].apply(clean_text)]\n","train_df['summary'] = train_df[\"summary\"].apply(clean_text)\n","\n","# Check for missing values and drop them\n","train_df = train_df.dropna()\n","print(train_df.head())\n","\n","# Split data into training and validation sets\n","train_df, val_df = train_test_split(train_df, test_size=0.2, stratify=train_df['severity'], random_state=42)\n","\n","train_df.shape, val_df.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XbcZcj0aEee1","executionInfo":{"status":"ok","timestamp":1717275895095,"user_tz":-180,"elapsed":6963,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"c9cc1522-ac0c-4b0e-c2d8-5e229cb0ecd3"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["   bug_id                                            summary  severity\n","0  365569                         remove workaround from bug    normal\n","1  365578        print preview crash on any url in gtk build  critical\n","2  365582                      line are not showing in table     major\n","3  365584  firefox render simplified arabic font face inc...    normal\n","4  365597                   crash nsinodeinfonodeinfomanager  critical\n"]},{"output_type":"execute_result","data":{"text/plain":["((127998, 3), (32000, 3))"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":[],"metadata":{"id":"sbnCrz6ulzCj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load BERT tokenizer\n","tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n","\n","# Tokenize summaries\n","train_encodings = tokenizer(train_df['summary'].tolist(), truncation=True, padding=True, max_length=128)\n","val_encodings = tokenizer(val_df['summary'].tolist(), truncation=True, padding=True, max_length=128)\n","\n","train_encodings.keys()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OOMd-DYsEhW7","executionInfo":{"status":"ok","timestamp":1717275961129,"user_tz":-180,"elapsed":55090,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"fd5fbef2-6d26-40bf-93a0-e19c4c513be4"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['input_ids', 'token_type_ids', 'attention_mask'])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Convert labels to numeric data\n","label_encoder = LabelEncoder()\n","train_labels = label_encoder.fit_transform(train_df['severity'])\n","val_labels = label_encoder.transform(val_df['severity'])\n"],"metadata":{"id":"LV8G4e92E0ZS","executionInfo":{"status":"ok","timestamp":1717275965387,"user_tz":-180,"elapsed":263,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"],"metadata":{"id":"6QbFolpwpApr","executionInfo":{"status":"ok","timestamp":1717276251681,"user_tz":-180,"elapsed":304,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["class_weights = compute_class_weight('balanced', classes=np.unique(train_labels), y=train_labels)\n","class_weights = torch.tensor(class_weights, dtype=torch.float)\n","# Move class weights to the same device as the model\n","class_weights = class_weights.to(device)"],"metadata":{"id":"YA6I7THqGVHS","executionInfo":{"status":"ok","timestamp":1717276253875,"user_tz":-180,"elapsed":285,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["# Custom dataset class\n","class BugDataset(torch.utils.data.Dataset):\n","    def __init__(self, encodings, labels):\n","        self.encodings = encodings\n","        self.labels = labels\n","\n","    def __getitem__(self, idx):\n","        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n","        item['labels'] = torch.tensor(self.labels[idx])\n","        return item\n","\n","    def __len__(self):\n","        return len(self.labels)"],"metadata":{"id":"D6Qfbr6fG5kG","executionInfo":{"status":"ok","timestamp":1717276256643,"user_tz":-180,"elapsed":374,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# Create dataset objects\n","train_dataset = BugDataset(train_encodings, train_labels)\n","val_dataset = BugDataset(val_encodings, val_labels)"],"metadata":{"id":"bn0XAS1oGLeE","executionInfo":{"status":"ok","timestamp":1717276258171,"user_tz":-180,"elapsed":305,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["\n","# Load pre-trained BERT model\n","model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=7)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ioVk414PHOm-","executionInfo":{"status":"ok","timestamp":1717276260152,"user_tz":-180,"elapsed":706,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"ce80808c-9518-439f-86d1-b6f2ad22d04b"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}]},{"cell_type":"code","source":["print(torch.cuda.is_available())\n","print(torch.cuda.device_count())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rCMvO9yRQLXZ","executionInfo":{"status":"ok","timestamp":1717275981401,"user_tz":-180,"elapsed":273,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"7a07378e-f1a4-4b99-b351-3d50cff2b18b"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","1\n"]}]},{"cell_type":"code","source":["training_args = TrainingArguments(\n","    output_dir= './results',\n","    learning_rate=2e-5,\n","    per_device_train_batch_size=16,\n","    per_device_eval_batch_size=16,\n","    num_train_epochs=3,\n","    weight_decay=0.01,\n","    evaluation_strategy=\"epoch\",\n","    save_strategy=\"epoch\",\n","    load_best_model_at_end=True,\n","    push_to_hub=False,\n","    fp16=True\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"073uxNYTPNbW","executionInfo":{"status":"ok","timestamp":1717276263002,"user_tz":-180,"elapsed":272,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"40176bec-1dfb-4f61-ef40-f95f4d6f3d31"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["\n","\n","# Define compute_metrics function using classification_report\n","def compute_metrics(p):\n","    preds = np.argmax(p.predictions, axis=1)\n","    labels = p.label_ids\n","    report = classification_report(labels, preds, output_dict=True)\n","    return {\n","        'accuracy': report['accuracy'],\n","        'precision': report['weighted avg']['precision'],\n","        'recall': report['weighted avg']['recall'],\n","        'f1': report['weighted avg']['f1-score']\n","    }\n","\n","# Custom Trainer class to incorporate class weights\n","class WeightedLossTrainer(Trainer):\n","    def __init__(self, *args, class_weights=None, **kwargs):\n","        super().__init__(*args, **kwargs)\n","        self.class_weights = class_weights\n","\n","    def compute_loss(self, model, inputs, return_outputs=False):\n","        labels = inputs.get('labels')\n","        outputs = model(**inputs)\n","        logits = outputs.get('logits')\n","        loss_fct = CrossEntropyLoss(weight=self.class_weights)\n","        loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))\n","        return (loss, outputs) if return_outputs else loss\n","# Trainer\n","trainer = WeightedLossTrainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=train_dataset,\n","    eval_dataset=val_dataset,\n","    compute_metrics=compute_metrics,\n","    class_weights=class_weights\n",")\n"],"metadata":{"id":"s1tJDitvJt0H","executionInfo":{"status":"ok","timestamp":1717276265115,"user_tz":-180,"elapsed":268,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# Check if GPU is available\n","if torch.cuda.is_available():\n","    print(\"CUDA is available. Training on GPU.\")\n","else:\n","    print(\"CUDA is not available. Training on CPU.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OtJarambOU9q","executionInfo":{"status":"ok","timestamp":1717276268586,"user_tz":-180,"elapsed":267,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"b299b91b-5707-4e1d-f7ac-848c36a158bc"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["CUDA is available. Training on GPU.\n"]}]},{"cell_type":"code","source":["\n","# Train the model\n","trainer.train()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":76},"id":"Mhi7V3Y7H24o","outputId":"2d77ae40-25d1-4f0b-e5b6-9e0491641e1b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","    <div>\n","      \n","      <progress value='1501' max='24000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [ 1501/24000 02:19 < 34:53, 10.75 it/s, Epoch 0.19/3]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n"," <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table><p>"]},"metadata":{}}]},{"cell_type":"code","source":["\n","# Evaluate the model\n","eval_result = trainer.evaluate()\n","print(f\"Evaluation result: {eval_result}\")\n","\n","# Tokenize test data\n","test_encodings = tokenizer(test_df['summary'].tolist(), truncation=True, padding=True, max_length=128)\n","\n","# Create test dataset\n","test_dataset = BugDataset(test_encodings, [0] * len(test_df))  # Dummy labels since we don't have them\n","\n","# Predict labels for test data\n","test_predictions = trainer.predict(test_dataset)\n","\n","# Convert numeric labels back to original labels\n","predicted_labels = label_encoder.inverse_transform(np.argmax(test_predictions.predictions, axis=1))\n","\n","# Prepare submission file\n","submission_df = pd.DataFrame({'bug_id': test_df['bug_id'], 'predicted_label': predicted_labels})\n","submission_df.to_csv('submission.csv', index=False)"],"metadata":{"id":"jFodfehoH3YP"},"execution_count":null,"outputs":[]}]}