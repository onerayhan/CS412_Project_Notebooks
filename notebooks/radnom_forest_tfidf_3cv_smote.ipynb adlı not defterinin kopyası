{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vU8JuBrU4s-Z","outputId":"aecbbd02-018d-4424-e86a-08c5998f09e9","executionInfo":{"status":"ok","timestamp":1717341722607,"user_tz":-180,"elapsed":69396,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o-awS9rS62yO","outputId":"4b963609-f00f-4fa3-cace-5dd61aa5d46a","executionInfo":{"status":"ok","timestamp":1717341842756,"user_tz":-180,"elapsed":914,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Cs412/project_files\n"]}],"source":["%cd drive/MyDrive/Cs412/project_files"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SLwVnBcn66eJ","outputId":"52b9b0af-3093-4e0b-f133-c8ee6abdbb87","executionInfo":{"status":"ok","timestamp":1717341844596,"user_tz":-180,"elapsed":579,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"outputs":[{"output_type":"stream","name":"stdout","text":[" bugs-test.csv                       predictions.csv              submission_0_51.csv\n"," bugs-train.csv                      \u001b[0m\u001b[01;34mresults\u001b[0m/                     submission_0_55.csv\n","'predictions_02 06 2024_02_49.csv'  'submission_02 06 2024.csv'   submission.csv\n"]}],"source":["%ls"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pQa7jqrZ7crC","outputId":"ca4657d6-b15b-4594-e8ef-d5bb6329c0fd","executionInfo":{"status":"ok","timestamp":1717344458763,"user_tz":-180,"elapsed":943377,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 12 concurrent workers.\n"]},{"output_type":"stream","name":"stdout","text":["building tree 1 of 100\n","building tree 2 of 100\n","building tree 3 of 100\n","building tree 4 of 100\n","building tree 5 of 100\n","building tree 6 of 100\n","building tree 7 of 100\n","building tree 8 of 100\n","building tree 9 of 100\n","building tree 10 of 100\n","building tree 11 of 100\n","building tree 12 of 100\n","building tree 13 of 100\n","building tree 14 of 100\n","building tree 15 of 100\n","building tree 16 of 100\n","building tree 17 of 100\n","building tree 18 of 100\n","building tree 19 of 100\n","building tree 20 of 100\n","building tree 21 of 100\n","building tree 22 of 100\n","building tree 23 of 100\n","building tree 24 of 100\n","building tree 25 of 100\n","building tree 26 of 100\n","building tree 27 of 100\n","building tree 28 of 100\n","building tree 29 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done  17 tasks      | elapsed:   51.7s\n"]},{"output_type":"stream","name":"stdout","text":["building tree 30 of 100\n","building tree 31 of 100\n","building tree 32 of 100\n","building tree 33 of 100\n","building tree 34 of 100\n","building tree 35 of 100\n","building tree 36 of 100\n","building tree 37 of 100\n","building tree 38 of 100\n","building tree 39 of 100\n","building tree 40 of 100\n","building tree 41 of 100\n","building tree 42 of 100\n","building tree 43 of 100\n","building tree 44 of 100\n","building tree 45 of 100\n","building tree 46 of 100\n","building tree 47 of 100\n","building tree 48 of 100\n","building tree 49 of 100\n","building tree 50 of 100\n","building tree 51 of 100\n","building tree 52 of 100\n","building tree 53 of 100\n","building tree 54 of 100\n","building tree 55 of 100\n","building tree 56 of 100\n","building tree 57 of 100\n","building tree 58 of 100\n","building tree 59 of 100\n","building tree 60 of 100\n","building tree 61 of 100\n","building tree 62 of 100\n","building tree 63 of 100\n","building tree 64 of 100\n","building tree 65 of 100\n","building tree 66 of 100\n","building tree 67 of 100\n","building tree 68 of 100\n","building tree 69 of 100\n","building tree 70 of 100\n","building tree 71 of 100\n","building tree 72 of 100\n","building tree 73 of 100\n","building tree 74 of 100\n","building tree 75 of 100\n","building tree 76 of 100\n","building tree 77 of 100\n","building tree 78 of 100\n","building tree 79 of 100\n","building tree 80 of 100\n","building tree 81 of 100\n","building tree 82 of 100\n","building tree 83 of 100\n","building tree 84 of 100\n","building tree 85 of 100\n","building tree 86 of 100\n","building tree 87 of 100\n","building tree 88 of 100\n","building tree 89 of 100\n","building tree 90 of 100\n","building tree 91 of 100\n","building tree 92 of 100\n","building tree 93 of 100\n","building tree 94 of 100\n","building tree 95 of 100\n","building tree 96 of 100\n","building tree 97 of 100\n","building tree 98 of 100\n","building tree 99 of 100\n","building tree 100 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:  3.8min finished\n","[Parallel(n_jobs=12)]: Using backend ThreadingBackend with 12 concurrent workers.\n","[Parallel(n_jobs=12)]: Done  17 tasks      | elapsed:    0.2s\n","[Parallel(n_jobs=12)]: Done 100 out of 100 | elapsed:    1.0s finished\n"]},{"output_type":"stream","name":"stdout","text":["Fold score: 0.7133305269130178\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 12 concurrent workers.\n"]},{"output_type":"stream","name":"stdout","text":["building tree 1 of 100\n","building tree 2 of 100\n","building tree 3 of 100\n","building tree 4 of 100\n","building tree 5 of 100\n","building tree 6 of 100\n","building tree 7 of 100\n","building tree 8 of 100\n","building tree 9 of 100\n","building tree 10 of 100\n","building tree 11 of 100building tree 12 of 100\n","\n","building tree 13 of 100\n","building tree 14 of 100\n","building tree 15 of 100\n","building tree 16 of 100\n","building tree 17 of 100\n","building tree 18 of 100\n","building tree 19 of 100\n","building tree 20 of 100\n","building tree 21 of 100\n","building tree 22 of 100\n","building tree 23 of 100\n","building tree 24 of 100\n","building tree 25 of 100\n","building tree 26 of 100\n","building tree 27 of 100\n","building tree 28 of 100\n","building tree 29 of 100\n","building tree 30 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done  17 tasks      | elapsed:   50.6s\n"]},{"output_type":"stream","name":"stdout","text":["building tree 31 of 100\n","building tree 32 of 100\n","building tree 33 of 100\n","building tree 34 of 100\n","building tree 35 of 100\n","building tree 36 of 100\n","building tree 37 of 100\n","building tree 38 of 100\n","building tree 39 of 100\n","building tree 40 of 100\n","building tree 41 of 100\n","building tree 42 of 100\n","building tree 43 of 100\n","building tree 44 of 100\n","building tree 45 of 100\n","building tree 46 of 100\n","building tree 47 of 100\n","building tree 48 of 100\n","building tree 49 of 100\n","building tree 50 of 100\n","building tree 51 of 100\n","building tree 52 of 100\n","building tree 53 of 100\n","building tree 54 of 100\n","building tree 55 of 100\n","building tree 56 of 100\n","building tree 57 of 100\n","building tree 58 of 100\n","building tree 59 of 100\n","building tree 60 of 100\n","building tree 61 of 100\n","building tree 62 of 100\n","building tree 63 of 100\n","building tree 64 of 100\n","building tree 65 of 100\n","building tree 66 of 100\n","building tree 67 of 100\n","building tree 68 of 100\n","building tree 69 of 100\n","building tree 70 of 100\n","building tree 71 of 100\n","building tree 72 of 100\n","building tree 73 of 100\n","building tree 74 of 100\n","building tree 75 of 100\n","building tree 76 of 100\n","building tree 77 of 100\n","building tree 78 of 100\n","building tree 79 of 100\n","building tree 80 of 100\n","building tree 81 of 100\n","building tree 82 of 100\n","building tree 83 of 100\n","building tree 84 of 100\n","building tree 85 of 100\n","building tree 86 of 100\n","building tree 87 of 100\n","building tree 88 of 100\n","building tree 89 of 100\n","building tree 90 of 100\n","building tree 91 of 100\n","building tree 92 of 100\n","building tree 93 of 100\n","building tree 94 of 100\n","building tree 95 of 100\n","building tree 96 of 100\n","building tree 97 of 100\n","building tree 98 of 100\n","building tree 99 of 100\n","building tree 100 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:  3.7min finished\n","[Parallel(n_jobs=12)]: Using backend ThreadingBackend with 12 concurrent workers.\n","[Parallel(n_jobs=12)]: Done  17 tasks      | elapsed:    0.2s\n","[Parallel(n_jobs=12)]: Done 100 out of 100 | elapsed:    1.1s finished\n"]},{"output_type":"stream","name":"stdout","text":["Fold score: 0.6525563561202105\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 12 concurrent workers.\n"]},{"output_type":"stream","name":"stdout","text":["building tree 1 of 100\n","building tree 2 of 100\n","building tree 3 of 100\n","building tree 4 of 100building tree 5 of 100\n","building tree 6 of 100building tree 7 of 100\n","building tree 8 of 100\n","\n","building tree 9 of 100\n","building tree 10 of 100\n","building tree 11 of 100\n","\n","building tree 12 of 100\n","building tree 13 of 100\n","building tree 14 of 100\n","building tree 15 of 100\n","building tree 16 of 100\n","building tree 17 of 100\n","building tree 18 of 100\n","building tree 19 of 100\n","building tree 20 of 100\n","building tree 21 of 100\n","building tree 22 of 100\n","building tree 23 of 100\n","building tree 24 of 100\n","building tree 25 of 100\n","building tree 26 of 100\n","building tree 27 of 100\n","building tree 28 of 100\n","building tree 29 of 100\n","building tree 30 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done  17 tasks      | elapsed:   50.4s\n"]},{"output_type":"stream","name":"stdout","text":["building tree 31 of 100\n","building tree 32 of 100\n","building tree 33 of 100\n","building tree 34 of 100\n","building tree 35 of 100\n","building tree 36 of 100\n","building tree 37 of 100\n","building tree 38 of 100\n","building tree 39 of 100\n","building tree 40 of 100\n","building tree 41 of 100\n","building tree 42 of 100\n","building tree 43 of 100\n","building tree 44 of 100\n","building tree 45 of 100\n","building tree 46 of 100\n","building tree 47 of 100\n","building tree 48 of 100\n","building tree 49 of 100\n","building tree 50 of 100\n","building tree 51 of 100\n","building tree 52 of 100\n","building tree 53 of 100\n","building tree 54 of 100\n","building tree 55 of 100\n","building tree 56 of 100\n","building tree 57 of 100\n","building tree 58 of 100\n","building tree 59 of 100\n","building tree 60 of 100\n","building tree 61 of 100\n","building tree 62 of 100\n","building tree 63 of 100\n","building tree 64 of 100\n","building tree 65 of 100\n","building tree 66 of 100\n","building tree 67 of 100\n","building tree 68 of 100\n","building tree 69 of 100\n","building tree 70 of 100\n","building tree 71 of 100\n","building tree 72 of 100\n","building tree 73 of 100\n","building tree 74 of 100\n","building tree 75 of 100\n","building tree 76 of 100\n","building tree 77 of 100\n","building tree 78 of 100\n","building tree 79 of 100\n","building tree 80 of 100\n","building tree 81 of 100\n","building tree 82 of 100\n","building tree 83 of 100\n","building tree 84 of 100\n","building tree 85 of 100\n","building tree 86 of 100\n","building tree 87 of 100\n","building tree 88 of 100\n","building tree 89 of 100\n","building tree 90 of 100\n","building tree 91 of 100\n","building tree 92 of 100\n","building tree 93 of 100\n","building tree 94 of 100\n","building tree 95 of 100\n","building tree 96 of 100\n","building tree 97 of 100\n","building tree 98 of 100\n","building tree 99 of 100\n","building tree 100 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:  3.7min finished\n","[Parallel(n_jobs=12)]: Using backend ThreadingBackend with 12 concurrent workers.\n","[Parallel(n_jobs=12)]: Done  17 tasks      | elapsed:    0.2s\n","[Parallel(n_jobs=12)]: Done 100 out of 100 | elapsed:    1.0s finished\n"]},{"output_type":"stream","name":"stdout","text":["Fold score: 0.7279489546471998\n","Random Forest Macro Precision: 0.6979452792268094\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 12 concurrent workers.\n"]},{"output_type":"stream","name":"stdout","text":["building tree 1 of 100\n","building tree 2 of 100\n","building tree 3 of 100building tree 4 of 100\n","building tree 5 of 100\n","building tree 6 of 100\n","\n","building tree 7 of 100\n","building tree 8 of 100\n","building tree 9 of 100\n","building tree 10 of 100\n","building tree 11 of 100\n","building tree 12 of 100\n","building tree 13 of 100\n","building tree 14 of 100\n","building tree 15 of 100\n","building tree 16 of 100\n","building tree 17 of 100\n","building tree 18 of 100\n","building tree 19 of 100\n","building tree 20 of 100\n","building tree 21 of 100\n","building tree 22 of 100\n","building tree 23 of 100\n","building tree 24 of 100\n","building tree 25 of 100\n","building tree 26 of 100\n","building tree 27 of 100\n","building tree 28 of 100\n","building tree 29 of 100\n","building tree 30 of 100\n","building tree 31 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done  17 tasks      | elapsed:   54.2s\n"]},{"output_type":"stream","name":"stdout","text":["building tree 32 of 100\n","building tree 33 of 100\n","building tree 34 of 100\n","building tree 35 of 100\n","building tree 36 of 100\n","building tree 37 of 100\n","building tree 38 of 100\n","building tree 39 of 100\n","building tree 40 of 100\n","building tree 41 of 100\n","building tree 42 of 100\n","building tree 43 of 100\n","building tree 44 of 100\n","building tree 45 of 100\n","building tree 46 of 100\n","building tree 47 of 100\n","building tree 48 of 100\n","building tree 49 of 100\n","building tree 50 of 100\n","building tree 51 of 100\n","building tree 52 of 100\n","building tree 53 of 100\n","building tree 54 of 100\n","building tree 55 of 100\n","building tree 56 of 100\n","building tree 57 of 100\n","building tree 58 of 100\n","building tree 59 of 100\n","building tree 60 of 100\n","building tree 61 of 100\n","building tree 62 of 100\n","building tree 63 of 100\n","building tree 64 of 100\n","building tree 65 of 100\n","building tree 66 of 100\n","building tree 67 of 100\n","building tree 68 of 100\n","building tree 69 of 100\n","building tree 70 of 100\n","building tree 71 of 100\n","building tree 72 of 100\n","building tree 73 of 100\n","building tree 74 of 100\n","building tree 75 of 100\n","building tree 76 of 100\n","building tree 77 of 100\n","building tree 78 of 100\n","building tree 79 of 100\n","building tree 80 of 100\n","building tree 81 of 100\n","building tree 82 of 100\n","building tree 83 of 100\n","building tree 84 of 100\n","building tree 85 of 100\n","building tree 86 of 100\n","building tree 87 of 100\n","building tree 88 of 100\n","building tree 89 of 100\n","building tree 90 of 100\n","building tree 91 of 100\n","building tree 92 of 100\n","building tree 93 of 100\n","building tree 94 of 100\n","building tree 95 of 100\n","building tree 96 of 100\n","building tree 97 of 100\n","building tree 98 of 100\n","building tree 99 of 100\n","building tree 100 of 100\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:  4.0min finished\n","[Parallel(n_jobs=12)]: Using backend ThreadingBackend with 12 concurrent workers.\n","[Parallel(n_jobs=12)]: Done  17 tasks      | elapsed:    1.0s\n","[Parallel(n_jobs=12)]: Done 100 out of 100 | elapsed:    4.4s finished\n"]},{"output_type":"stream","name":"stdout","text":["Model saved to random_forest_smote_model.pkl\n","TF-IDF vectorizer saved to tfidf_vectorizer.pkl\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import make_scorer, precision_score, classification_report\n","from imblearn.over_sampling import SMOTE\n","import joblib\n","import traceback\n","import numpy as np\n","\n","# Load the data\n","data = pd.read_csv('bugs-train.csv')\n","\n","# Severity mapping\n","severity_mapping = {\n","    'trivial': 0,\n","    'enhancement': 1,\n","    'minor': 2,\n","    'normal': 3,\n","    'major': 4,\n","    'blocker': 5,\n","    'critical': 6\n","}\n","\n","# Map severity values to integers\n","data['severity'] = data['severity'].map(severity_mapping)\n","\n","# Extract features using TF-IDF\n","X = data['summary']\n","y = data['severity']\n","\n","# Initialize TF-IDF Vectorizer\n","tfidf_vectorizer = TfidfVectorizer()\n","\n","# Apply TF-IDF transformation\n","X_tfidf = tfidf_vectorizer.fit_transform(X)\n","\n","# Initialize the Random Forest classifier\n","clf = RandomForestClassifier(verbose=2, n_jobs=-1)\n","\n","# Scoring method\n","scorer = make_scorer(precision_score, average='macro')\n","\n","# Apply Stratified K-Fold Cross Validation\n","skf = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n","scores = []\n","\n","# Apply SMOTE only on the training folds\n","smote = SMOTE(sampling_strategy={\n","    0: 7000,  # trivial\n","    1: 15000,  # enhancement\n","    2: 10000,  # minor\n","    4: 20000,  # major\n","    5: 5000,   # blocker\n","    6 : 50000  # critical\n","}, random_state=42)\n","\n","try:\n","    for train_index, test_index in skf.split(X_tfidf, y):\n","        X_train, X_test = X_tfidf[train_index], X_tfidf[test_index]\n","        y_train, y_test = y[train_index], y[test_index]\n","\n","        X_train_res, y_train_res = smote.fit_resample(X_train, y_train)\n","\n","        clf.fit(X_train_res, y_train_res)\n","        y_pred = clf.predict(X_test)\n","\n","        score = precision_score(y_test, y_pred, average='macro')\n","        scores.append(score)\n","        print(f\"Fold score: {score}\")\n","\n","    print(f\"Random Forest Macro Precision: {np.mean(scores)}\")\n","\n","except Exception as e:\n","    print(f\"Error evaluating Random Forest: {e}\")\n","    traceback.print_exc()\n","\n","# Fit the model on the entire training data\n","X_res, y_res = smote.fit_resample(X_tfidf, y)\n","clf.fit(X_res, y_res)\n","\n","# Predict on the training set (or a separate test set if available)\n","y_pred = clf.predict(X_res)\n","# Generate classification report\n","report = classification_report(y_res, y_pred, output_dict=True)\n","\n","# Save the trained model\n","model_path = 'random_forest_smote_model.pkl'\n","joblib.dump(clf, model_path)\n","print(f\"Model saved to {model_path}\")\n","\n","# Optionally, you can also save the TF-IDF vectorizer if needed for future use\n","vectorizer_path = 'tfidf_vectorizer.pkl'\n","joblib.dump(tfidf_vectorizer, vectorizer_path)\n","print(f\"TF-IDF vectorizer saved to {vectorizer_path}\")\n"]},{"cell_type":"code","source":["print(report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XtETzVK2pAew","executionInfo":{"status":"ok","timestamp":1717344814943,"user_tz":-180,"elapsed":1057,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}},"outputId":"94afbae7-0f65-4cd1-c705-ac97ac5fb613"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["{'0': {'precision': 0.9995711835334476, 'recall': 0.999, 'f1-score': 0.999285510145756, 'support': 7000}, '1': {'precision': 0.9996663775271902, 'recall': 0.9988, 'f1-score': 0.9992330009670858, 'support': 15000}, '2': {'precision': 0.9997990757484428, 'recall': 0.9952, 'f1-score': 0.9974942367445124, 'support': 10000}, '3': {'precision': 0.9990153963426739, 'recall': 0.9996901171198372, 'f1-score': 0.999352642845512, 'support': 125854}, '4': {'precision': 0.99969960949234, 'recall': 0.9984, 'f1-score': 0.9990493820983639, 'support': 20000}, '5': {'precision': 0.9997998398718975, 'recall': 0.999, 'f1-score': 0.9993997599039617, 'support': 5000}, '6': {'precision': 0.9992801151815709, 'recall': 0.99944, 'f1-score': 0.9993600511959042, 'support': 50000}, 'accuracy': 0.9992398670411502, 'macro avg': {'precision': 0.9995473710996519, 'recall': 0.998504302445691, 'f1-score': 0.9990249405572994, 'support': 232854}, 'weighted avg': {'precision': 0.9992401485253511, 'recall': 0.9992398670411502, 'f1-score': 0.9992396629086598, 'support': 232854}}\n"]}]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YQX5K3Xr_zLi","outputId":"a5802a80-bdb6-46f5-f6e0-bc46152ed46d","executionInfo":{"status":"ok","timestamp":1717344853201,"user_tz":-180,"elapsed":7950,"user":{"displayName":"Ayhan Öner","userId":"02527438790910619741"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Model loaded successfully\n","TF-IDF vectorizer loaded successfully\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=12)]: Using backend ThreadingBackend with 12 concurrent workers.\n","[Parallel(n_jobs=12)]: Done  17 tasks      | elapsed:    0.4s\n"]},{"output_type":"stream","name":"stdout","text":["Predictions saved to randomforest_predictions_2.csv\n"]},{"output_type":"stream","name":"stderr","text":["[Parallel(n_jobs=12)]: Done 100 out of 100 | elapsed:    1.8s finished\n"]}],"source":["import joblib\n","import pandas as pd\n","\n","test_data = pd.read_csv(\"bugs-test.csv\")\n","severity_mapping = {\n","    'trivial': 0,\n","    'enhancement': 1,\n","    'minor': 2,\n","    'normal': 3,\n","    'major': 4,\n","    'blocker': 5,\n","    'critical': 6\n","}\n","\n","# Load the trained model\n","model_path = 'random_forest_smote_model.pkl'\n","clf_loaded = joblib.load(model_path)\n","print(\"Model loaded successfully\")\n","\n","# Load the TF-IDF vectorizer\n","vectorizer_path = 'tfidf_vectorizer.pkl'\n","tfidf_vectorizer_loaded = joblib.load(vectorizer_path)\n","print(\"TF-IDF vectorizer loaded successfully\")\n","\n","# Predict on the test data\n","X_test_tfidf = tfidf_vectorizer_loaded.transform(test_data['summary'])\n","test_data['severity_mapped'] = clf_loaded.predict(X_test_tfidf)\n","\n","# Map the severity values back to their string representations\n","inverse_severity_mapping = {v: k for k, v in severity_mapping.items()}\n","test_data['severity'] = test_data['severity_mapped'].map(inverse_severity_mapping)\n","\n","test_data.rename(columns={\"bug id\": \"bug_id\"}, inplace=True)\n","# Create the output CSV file with bug id and predicted severity\n","output_data = test_data[['bug_id', 'severity']]\n","output_file_path = 'randomforest_predictions_2.csv'\n","output_data.to_csv(output_file_path, index=False)\n","\n","print(f\"Predictions saved to {output_file_path}\")"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"L4","machine_shape":"hm","provenance":[{"file_id":"1xNgCrMKlVO0vciTvKlbqu8upv8G29lzb","timestamp":1717344874863}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}